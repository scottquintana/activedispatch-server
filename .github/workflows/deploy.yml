name: CI + Deploy to Cloud Run

on:
  pull_request:
    branches: [ "main" ]   # run tests before merge
  push:
    branches: [ "main" ]   # deploy after merge

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  REPO: app-repo
  SERVICE: activedispatch

# avoid overlapping runs from the same ref
concurrency:
  group: cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test
        env:
          NODE_ENV: test
          LOG_LEVEL: warn

  build-and-deploy:
    name: Build container and deploy to Cloud Run
    if: github.event_name == 'push'     # only deploy after merge to main
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      # Auth to GCP with the CI/CD service account key you added in repo secrets
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      # Configure Docker to use gcloud's credential helper (good)
      - name: Configure Artifact Registry helper
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # ALSO perform an explicit docker login with an OAuth2 access token (fixes your error)
      - name: Docker login to Artifact Registry
        run: |
          echo "$(gcloud auth print-access-token)" | \
          docker login -u oauth2accesstoken --password-stdin https://${{ env.REGION }}-docker.pkg.dev

      - name: Build (linux/amd64) and push
        id: build
        shell: bash
        run: |
          set -euo pipefail
          IMAGE_BASE=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.SERVICE }}
          TAG=$(git rev-parse --short=12 HEAD)
          IMAGE="$IMAGE_BASE:$TAG"
          LATEST="$IMAGE_BASE:latest"

          # Ensure amd64 image for Cloud Run
          docker buildx create --use 2>/dev/null || true
          docker buildx build --platform linux/amd64 -t "$IMAGE" --push .

          # Update :latest (optional)
          docker buildx imagetools create -t "$LATEST" "$IMAGE"

          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

      - name: Pin image in service.yaml
        run: |
          IMAGE="${{ steps.build.outputs.image }}"
          sed -i 's#image: .*#image: '"$IMAGE"'#' cloudrun/service.yaml
          echo "Pinned image to $IMAGE"

      - name: Deploy to Cloud Run (replace service)
        run: |
          gcloud run services replace cloudrun/service.yaml \
            --region ${{ env.REGION }} \
            --project ${{ env.PROJECT_ID }}
